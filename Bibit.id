{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "# import packages and read the input data\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import seaborn as sns\n",
    "#import xgboost as xgb \n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import classification_report,accuracy_score,confusion_matrix\n",
    "from sklearn.metrics import cohen_kappa_score\n",
    "from sklearn.metrics import roc_curve, roc_auc_score\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>User ID</th>\n",
       "      <th>FullName</th>\n",
       "      <th>Install</th>\n",
       "      <th>Uninstall Time</th>\n",
       "      <th>App Launch</th>\n",
       "      <th>Start Registration</th>\n",
       "      <th>Registration Completed</th>\n",
       "      <th>First Time Transaction</th>\n",
       "      <th>City Activity</th>\n",
       "      <th>Country Activity</th>\n",
       "      <th>OS</th>\n",
       "      <th>Age</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>51206</td>\n",
       "      <td>Abby Nixon</td>\n",
       "      <td>2021-01-06</td>\n",
       "      <td>2021-01-10 00:00:00</td>\n",
       "      <td>2021-01-06</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td>Surabaya</td>\n",
       "      <td>Indonesia</td>\n",
       "      <td>IOS</td>\n",
       "      <td>20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>58863</td>\n",
       "      <td>Abril Hunter</td>\n",
       "      <td>2021-01-10</td>\n",
       "      <td>2021-01-11 00:00:00</td>\n",
       "      <td>2021-01-10</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td>Surabaya</td>\n",
       "      <td>Indonesia</td>\n",
       "      <td>Android</td>\n",
       "      <td>19</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>58934</td>\n",
       "      <td>Ada Murillo</td>\n",
       "      <td>2021-01-07</td>\n",
       "      <td>2021-01-09 00:00:00</td>\n",
       "      <td>2021-01-07</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td>Tangerang</td>\n",
       "      <td>Indonesia</td>\n",
       "      <td>Android</td>\n",
       "      <td>19</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>54810</td>\n",
       "      <td>Addisyn Bradford</td>\n",
       "      <td>2021-01-05</td>\n",
       "      <td></td>\n",
       "      <td>2021-01-05</td>\n",
       "      <td>2021-01-05 00:00:00</td>\n",
       "      <td>2021-01-05 00:00:00</td>\n",
       "      <td>2021-01-05 00:00:00</td>\n",
       "      <td>Tangerang</td>\n",
       "      <td>Indonesia</td>\n",
       "      <td>Android</td>\n",
       "      <td>19</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>51424</td>\n",
       "      <td>Adelyn Simmons</td>\n",
       "      <td>2021-01-21</td>\n",
       "      <td></td>\n",
       "      <td>2021-01-21</td>\n",
       "      <td>2021-01-21 00:00:00</td>\n",
       "      <td>2021-01-21 00:00:00</td>\n",
       "      <td></td>\n",
       "      <td>Semarang</td>\n",
       "      <td>Indonesia</td>\n",
       "      <td>Android</td>\n",
       "      <td>22</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   User ID          FullName   Install        Uninstall Time App Launch  \\\n",
       "0    51206        Abby Nixon 2021-01-06  2021-01-10 00:00:00 2021-01-06   \n",
       "1    58863      Abril Hunter 2021-01-10  2021-01-11 00:00:00 2021-01-10   \n",
       "2    58934       Ada Murillo 2021-01-07  2021-01-09 00:00:00 2021-01-07   \n",
       "3    54810  Addisyn Bradford 2021-01-05                      2021-01-05   \n",
       "4    51424    Adelyn Simmons 2021-01-21                      2021-01-21   \n",
       "\n",
       "   Start Registration  Registration Completed First Time Transaction  \\\n",
       "0                                                                      \n",
       "1                                                                      \n",
       "2                                                                      \n",
       "3  2021-01-05 00:00:00    2021-01-05 00:00:00    2021-01-05 00:00:00   \n",
       "4  2021-01-21 00:00:00    2021-01-21 00:00:00                          \n",
       "\n",
       "  City Activity Country Activity       OS  Age  \n",
       "0      Surabaya        Indonesia      IOS   20  \n",
       "1      Surabaya        Indonesia  Android   19  \n",
       "2     Tangerang        Indonesia  Android   19  \n",
       "3     Tangerang        Indonesia  Android   19  \n",
       "4      Semarang        Indonesia  Android   22  "
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "user_details = pd.read_excel(\"C:/Users/tussh/Desktop/Bibit Task/Bibit Backup.xlsx\")\n",
    "user_details.drop_duplicates()\n",
    "user_details.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(907, 12)"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "user_details.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "user_details.duplicated().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "User ID                   892\n",
       "FullName                  785\n",
       "Install                    90\n",
       "Uninstall Time            105\n",
       "App Launch                 96\n",
       "Start Registration         98\n",
       "Registration Completed     89\n",
       "First Time Transaction     74\n",
       "City Activity              48\n",
       "Country Activity            1\n",
       "OS                          2\n",
       "Age                        43\n",
       "dtype: int64"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "user_details.nunique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>User ID</th>\n",
       "      <th>FullName</th>\n",
       "      <th>Acquisition Channel</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>51206</td>\n",
       "      <td>Abby Nixon</td>\n",
       "      <td>Organic</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>58863</td>\n",
       "      <td>Abril Hunter</td>\n",
       "      <td>Organic</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>58934</td>\n",
       "      <td>Ada Murillo</td>\n",
       "      <td>Organic</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>54810</td>\n",
       "      <td>Addisyn Bradford</td>\n",
       "      <td>Organic</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>51424</td>\n",
       "      <td>Adelyn Simmons</td>\n",
       "      <td>Google Ads</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   User ID          FullName Acquisition Channel\n",
       "0    51206        Abby Nixon             Organic\n",
       "1    58863      Abril Hunter             Organic\n",
       "2    58934       Ada Murillo             Organic\n",
       "3    54810  Addisyn Bradford             Organic\n",
       "4    51424    Adelyn Simmons          Google Ads"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "acquisition_channel = pd.read_excel(\"C:/Users/tussh/Desktop/Bibit Task/Bibit Backup.xlsx\",sheet_name='acquisition_channel')\n",
    "acquisition_channel.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>User ID</th>\n",
       "      <th>FullName_x</th>\n",
       "      <th>Install</th>\n",
       "      <th>Uninstall Time</th>\n",
       "      <th>App Launch</th>\n",
       "      <th>Start Registration</th>\n",
       "      <th>Registration Completed</th>\n",
       "      <th>First Time Transaction</th>\n",
       "      <th>City Activity</th>\n",
       "      <th>Country Activity</th>\n",
       "      <th>OS</th>\n",
       "      <th>Age</th>\n",
       "      <th>FullName_y</th>\n",
       "      <th>Acquisition Channel</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>51206</td>\n",
       "      <td>Abby Nixon</td>\n",
       "      <td>2021-01-06</td>\n",
       "      <td>2021-01-10 00:00:00</td>\n",
       "      <td>2021-01-06</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td>Surabaya</td>\n",
       "      <td>Indonesia</td>\n",
       "      <td>IOS</td>\n",
       "      <td>20</td>\n",
       "      <td>Abby Nixon</td>\n",
       "      <td>Organic</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>58863</td>\n",
       "      <td>Abril Hunter</td>\n",
       "      <td>2021-01-10</td>\n",
       "      <td>2021-01-11 00:00:00</td>\n",
       "      <td>2021-01-10</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td>Surabaya</td>\n",
       "      <td>Indonesia</td>\n",
       "      <td>Android</td>\n",
       "      <td>19</td>\n",
       "      <td>Abril Hunter</td>\n",
       "      <td>Organic</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>58934</td>\n",
       "      <td>Ada Murillo</td>\n",
       "      <td>2021-01-07</td>\n",
       "      <td>2021-01-09 00:00:00</td>\n",
       "      <td>2021-01-07</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td>Tangerang</td>\n",
       "      <td>Indonesia</td>\n",
       "      <td>Android</td>\n",
       "      <td>19</td>\n",
       "      <td>Ada Murillo</td>\n",
       "      <td>Organic</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>54810</td>\n",
       "      <td>Addisyn Bradford</td>\n",
       "      <td>2021-01-05</td>\n",
       "      <td></td>\n",
       "      <td>2021-01-05</td>\n",
       "      <td>2021-01-05 00:00:00</td>\n",
       "      <td>2021-01-05 00:00:00</td>\n",
       "      <td>2021-01-05 00:00:00</td>\n",
       "      <td>Tangerang</td>\n",
       "      <td>Indonesia</td>\n",
       "      <td>Android</td>\n",
       "      <td>19</td>\n",
       "      <td>Addisyn Bradford</td>\n",
       "      <td>Organic</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>51424</td>\n",
       "      <td>Adelyn Simmons</td>\n",
       "      <td>2021-01-21</td>\n",
       "      <td></td>\n",
       "      <td>2021-01-21</td>\n",
       "      <td>2021-01-21 00:00:00</td>\n",
       "      <td>2021-01-21 00:00:00</td>\n",
       "      <td></td>\n",
       "      <td>Semarang</td>\n",
       "      <td>Indonesia</td>\n",
       "      <td>Android</td>\n",
       "      <td>22</td>\n",
       "      <td>Adelyn Simmons</td>\n",
       "      <td>Google Ads</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   User ID        FullName_x   Install        Uninstall Time App Launch  \\\n",
       "0    51206        Abby Nixon 2021-01-06  2021-01-10 00:00:00 2021-01-06   \n",
       "1    58863      Abril Hunter 2021-01-10  2021-01-11 00:00:00 2021-01-10   \n",
       "2    58934       Ada Murillo 2021-01-07  2021-01-09 00:00:00 2021-01-07   \n",
       "3    54810  Addisyn Bradford 2021-01-05                      2021-01-05   \n",
       "4    51424    Adelyn Simmons 2021-01-21                      2021-01-21   \n",
       "\n",
       "   Start Registration  Registration Completed First Time Transaction  \\\n",
       "0                                                                      \n",
       "1                                                                      \n",
       "2                                                                      \n",
       "3  2021-01-05 00:00:00    2021-01-05 00:00:00    2021-01-05 00:00:00   \n",
       "4  2021-01-21 00:00:00    2021-01-21 00:00:00                          \n",
       "\n",
       "  City Activity Country Activity       OS  Age        FullName_y  \\\n",
       "0      Surabaya        Indonesia      IOS   20        Abby Nixon   \n",
       "1      Surabaya        Indonesia  Android   19      Abril Hunter   \n",
       "2     Tangerang        Indonesia  Android   19       Ada Murillo   \n",
       "3     Tangerang        Indonesia  Android   19  Addisyn Bradford   \n",
       "4      Semarang        Indonesia  Android   22    Adelyn Simmons   \n",
       "\n",
       "  Acquisition Channel  \n",
       "0             Organic  \n",
       "1             Organic  \n",
       "2             Organic  \n",
       "3             Organic  \n",
       "4          Google Ads  "
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_us_acq=user_details.merge(acquisition_channel,on='User ID' , how='left')\n",
    "df_us_acq.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>User ID</th>\n",
       "      <th>FullName</th>\n",
       "      <th>Referral Code</th>\n",
       "      <th>Referrer Code</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>51206</td>\n",
       "      <td>Abby Nixon</td>\n",
       "      <td>NaN</td>\n",
       "      <td>INV14278</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>58863</td>\n",
       "      <td>Abril Hunter</td>\n",
       "      <td>NaN</td>\n",
       "      <td>INV50686</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>58934</td>\n",
       "      <td>Ada Murillo</td>\n",
       "      <td>NaN</td>\n",
       "      <td>INV85136</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>54810</td>\n",
       "      <td>Addisyn Bradford</td>\n",
       "      <td>NaN</td>\n",
       "      <td>INV10756</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>51424</td>\n",
       "      <td>Adelyn Simmons</td>\n",
       "      <td>NaN</td>\n",
       "      <td>INV48190</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   User ID          FullName Referral Code Referrer Code\n",
       "0    51206        Abby Nixon           NaN      INV14278\n",
       "1    58863      Abril Hunter           NaN      INV50686\n",
       "2    58934       Ada Murillo           NaN      INV85136\n",
       "3    54810  Addisyn Bradford           NaN      INV10756\n",
       "4    51424    Adelyn Simmons           NaN      INV48190"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "referral = pd.read_excel(\"C:/Users/tussh/Desktop/Bibit Task/Bibit Backup.xlsx\",sheet_name='referral')\n",
    "referral.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(255, 4)"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "referral.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>User ID</th>\n",
       "      <th>FirstName_x</th>\n",
       "      <th>LastName_x</th>\n",
       "      <th>FullName_x</th>\n",
       "      <th>Install</th>\n",
       "      <th>Uninstall Time</th>\n",
       "      <th>App Launch</th>\n",
       "      <th>Start Registration</th>\n",
       "      <th>Registration Completed</th>\n",
       "      <th>First Time Transaction</th>\n",
       "      <th>City Activity</th>\n",
       "      <th>Country Activity</th>\n",
       "      <th>OS</th>\n",
       "      <th>Age</th>\n",
       "      <th>FirstName_y</th>\n",
       "      <th>LastName_y</th>\n",
       "      <th>FullName_y</th>\n",
       "      <th>Referral Code</th>\n",
       "      <th>Referrer Code</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>51206</td>\n",
       "      <td>Abby</td>\n",
       "      <td>Nixon</td>\n",
       "      <td>Abby Nixon</td>\n",
       "      <td>2021-01-06</td>\n",
       "      <td>2021-01-10 00:00:00</td>\n",
       "      <td>2021-01-06</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td>Surabaya</td>\n",
       "      <td>Indonesia</td>\n",
       "      <td>IOS</td>\n",
       "      <td>20</td>\n",
       "      <td>Abby</td>\n",
       "      <td>Nixon</td>\n",
       "      <td>Abby Nixon</td>\n",
       "      <td>NaN</td>\n",
       "      <td>INV14278</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>58863</td>\n",
       "      <td>Abril</td>\n",
       "      <td>Hunter</td>\n",
       "      <td>Abril Hunter</td>\n",
       "      <td>2021-01-10</td>\n",
       "      <td>2021-01-11 00:00:00</td>\n",
       "      <td>2021-01-10</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td>Surabaya</td>\n",
       "      <td>Indonesia</td>\n",
       "      <td>Android</td>\n",
       "      <td>19</td>\n",
       "      <td>Abril</td>\n",
       "      <td>Hunter</td>\n",
       "      <td>Abril Hunter</td>\n",
       "      <td>NaN</td>\n",
       "      <td>INV50686</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>58934</td>\n",
       "      <td>Ada</td>\n",
       "      <td>Murillo</td>\n",
       "      <td>Ada Murillo</td>\n",
       "      <td>2021-01-07</td>\n",
       "      <td>2021-01-09 00:00:00</td>\n",
       "      <td>2021-01-07</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td>Tangerang</td>\n",
       "      <td>Indonesia</td>\n",
       "      <td>Android</td>\n",
       "      <td>19</td>\n",
       "      <td>Ada</td>\n",
       "      <td>Murillo</td>\n",
       "      <td>Ada Murillo</td>\n",
       "      <td>NaN</td>\n",
       "      <td>INV85136</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>54810</td>\n",
       "      <td>Addisyn</td>\n",
       "      <td>Bradford</td>\n",
       "      <td>Addisyn Bradford</td>\n",
       "      <td>2021-01-05</td>\n",
       "      <td></td>\n",
       "      <td>2021-01-05</td>\n",
       "      <td>2021-01-05 00:00:00</td>\n",
       "      <td>2021-01-05 00:00:00</td>\n",
       "      <td>2021-01-05 00:00:00</td>\n",
       "      <td>Tangerang</td>\n",
       "      <td>Indonesia</td>\n",
       "      <td>Android</td>\n",
       "      <td>19</td>\n",
       "      <td>Addisyn</td>\n",
       "      <td>Bradford</td>\n",
       "      <td>Addisyn Bradford</td>\n",
       "      <td>NaN</td>\n",
       "      <td>INV10756</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>51424</td>\n",
       "      <td>Adelyn</td>\n",
       "      <td>Simmons</td>\n",
       "      <td>Adelyn Simmons</td>\n",
       "      <td>2021-01-21</td>\n",
       "      <td></td>\n",
       "      <td>2021-01-21</td>\n",
       "      <td>2021-01-21 00:00:00</td>\n",
       "      <td>2021-01-21 00:00:00</td>\n",
       "      <td></td>\n",
       "      <td>Semarang</td>\n",
       "      <td>Indonesia</td>\n",
       "      <td>Android</td>\n",
       "      <td>22</td>\n",
       "      <td>Adelyn</td>\n",
       "      <td>Simmons</td>\n",
       "      <td>Adelyn Simmons</td>\n",
       "      <td>NaN</td>\n",
       "      <td>INV48190</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   User ID FirstName_x LastName_x        FullName_x   Install   \\\n",
       "0    51206        Abby      Nixon        Abby Nixon 2021-01-06   \n",
       "1    58863       Abril     Hunter      Abril Hunter 2021-01-10   \n",
       "2    58934         Ada    Murillo       Ada Murillo 2021-01-07   \n",
       "3    54810     Addisyn   Bradford  Addisyn Bradford 2021-01-05   \n",
       "4    51424      Adelyn    Simmons    Adelyn Simmons 2021-01-21   \n",
       "\n",
       "        Uninstall Time App Launch  Start Registration  Registration Completed  \\\n",
       "0  2021-01-10 00:00:00 2021-01-06                                               \n",
       "1  2021-01-11 00:00:00 2021-01-10                                               \n",
       "2  2021-01-09 00:00:00 2021-01-07                                               \n",
       "3                      2021-01-05  2021-01-05 00:00:00    2021-01-05 00:00:00   \n",
       "4                      2021-01-21  2021-01-21 00:00:00    2021-01-21 00:00:00   \n",
       "\n",
       "  First Time Transaction City Activity Country Activity       OS  Age  \\\n",
       "0                             Surabaya        Indonesia      IOS   20   \n",
       "1                             Surabaya        Indonesia  Android   19   \n",
       "2                            Tangerang        Indonesia  Android   19   \n",
       "3    2021-01-05 00:00:00     Tangerang        Indonesia  Android   19   \n",
       "4                             Semarang        Indonesia  Android   22   \n",
       "\n",
       "  FirstName_y LastName_y        FullName_y Referral Code Referrer Code  \n",
       "0        Abby      Nixon        Abby Nixon           NaN      INV14278  \n",
       "1       Abril     Hunter      Abril Hunter           NaN      INV50686  \n",
       "2         Ada    Murillo       Ada Murillo           NaN      INV85136  \n",
       "3     Addisyn   Bradford  Addisyn Bradford           NaN      INV10756  \n",
       "4      Adelyn    Simmons    Adelyn Simmons           NaN      INV48190  "
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_us_acq_ref=df_us_acq.merge(referral ,left_on='User ID',right_on='User ID',how='left')\n",
    "df_us_ref.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(941, 17)"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_us_acq_ref.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "User ID                   892\n",
       "FullName_x                785\n",
       "Install                    90\n",
       "Uninstall Time            105\n",
       "App Launch                 96\n",
       "Start Registration         98\n",
       "Registration Completed     89\n",
       "First Time Transaction     74\n",
       "City Activity              48\n",
       "Country Activity            1\n",
       "OS                          2\n",
       "Age                        43\n",
       "FullName_y                785\n",
       "Acquisition Channel         4\n",
       "FullName                  244\n",
       "Referral Code             151\n",
       "Referrer Code             112\n",
       "dtype: int64"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_us_acq_ref.nunique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>User ID</th>\n",
       "      <th>FullName</th>\n",
       "      <th>First Time Transaction Amount</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>59958</td>\n",
       "      <td>Alfonso Tanner</td>\n",
       "      <td>100000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>59861</td>\n",
       "      <td>Alessandro Valencia</td>\n",
       "      <td>100000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>59138</td>\n",
       "      <td>Ana Edwards</td>\n",
       "      <td>100000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>58934</td>\n",
       "      <td>Ada Murillo</td>\n",
       "      <td>100000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>58863</td>\n",
       "      <td>Abril Hunter</td>\n",
       "      <td>100000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   User ID             FullName  First Time Transaction Amount\n",
       "0    59958       Alfonso Tanner                         100000\n",
       "1    59861  Alessandro Valencia                         100000\n",
       "2    59138          Ana Edwards                         100000\n",
       "3    58934          Ada Murillo                         100000\n",
       "4    58863         Abril Hunter                         100000"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "first_transaction_amount = pd.read_excel(\"C:/Users/tussh/Desktop/Bibit Task/Bibit Backup.xlsx\",sheet_name='first_transaction_amount')\n",
    "first_transaction_amount.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(262, 19)"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_us_ref.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>User ID</th>\n",
       "      <th>FullName_x</th>\n",
       "      <th>Install</th>\n",
       "      <th>Uninstall Time</th>\n",
       "      <th>App Launch</th>\n",
       "      <th>Start Registration</th>\n",
       "      <th>Registration Completed</th>\n",
       "      <th>First Time Transaction</th>\n",
       "      <th>City Activity</th>\n",
       "      <th>Country Activity</th>\n",
       "      <th>OS</th>\n",
       "      <th>Age</th>\n",
       "      <th>FullName_y</th>\n",
       "      <th>Acquisition Channel</th>\n",
       "      <th>FullName_x</th>\n",
       "      <th>Referral Code</th>\n",
       "      <th>Referrer Code</th>\n",
       "      <th>FullName_y</th>\n",
       "      <th>First Time Transaction Amount</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>51206</td>\n",
       "      <td>Abby Nixon</td>\n",
       "      <td>2021-01-06</td>\n",
       "      <td>2021-01-10 00:00:00</td>\n",
       "      <td>2021-01-06</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td>Surabaya</td>\n",
       "      <td>Indonesia</td>\n",
       "      <td>IOS</td>\n",
       "      <td>20</td>\n",
       "      <td>Abby Nixon</td>\n",
       "      <td>Organic</td>\n",
       "      <td>Abby Nixon</td>\n",
       "      <td>NaN</td>\n",
       "      <td>INV14278</td>\n",
       "      <td>Abby Nixon</td>\n",
       "      <td>100000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>58863</td>\n",
       "      <td>Abril Hunter</td>\n",
       "      <td>2021-01-10</td>\n",
       "      <td>2021-01-11 00:00:00</td>\n",
       "      <td>2021-01-10</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td>Surabaya</td>\n",
       "      <td>Indonesia</td>\n",
       "      <td>Android</td>\n",
       "      <td>19</td>\n",
       "      <td>Abril Hunter</td>\n",
       "      <td>Organic</td>\n",
       "      <td>Abril Hunter</td>\n",
       "      <td>NaN</td>\n",
       "      <td>INV50686</td>\n",
       "      <td>Abril Hunter</td>\n",
       "      <td>100000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>58934</td>\n",
       "      <td>Ada Murillo</td>\n",
       "      <td>2021-01-07</td>\n",
       "      <td>2021-01-09 00:00:00</td>\n",
       "      <td>2021-01-07</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td>Tangerang</td>\n",
       "      <td>Indonesia</td>\n",
       "      <td>Android</td>\n",
       "      <td>19</td>\n",
       "      <td>Ada Murillo</td>\n",
       "      <td>Organic</td>\n",
       "      <td>Ada Murillo</td>\n",
       "      <td>NaN</td>\n",
       "      <td>INV85136</td>\n",
       "      <td>Ada Murillo</td>\n",
       "      <td>100000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>54810</td>\n",
       "      <td>Addisyn Bradford</td>\n",
       "      <td>2021-01-05</td>\n",
       "      <td></td>\n",
       "      <td>2021-01-05</td>\n",
       "      <td>2021-01-05 00:00:00</td>\n",
       "      <td>2021-01-05 00:00:00</td>\n",
       "      <td>2021-01-05 00:00:00</td>\n",
       "      <td>Tangerang</td>\n",
       "      <td>Indonesia</td>\n",
       "      <td>Android</td>\n",
       "      <td>19</td>\n",
       "      <td>Addisyn Bradford</td>\n",
       "      <td>Organic</td>\n",
       "      <td>Addisyn Bradford</td>\n",
       "      <td>NaN</td>\n",
       "      <td>INV10756</td>\n",
       "      <td>Addisyn Bradford</td>\n",
       "      <td>100000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>51424</td>\n",
       "      <td>Adelyn Simmons</td>\n",
       "      <td>2021-01-21</td>\n",
       "      <td></td>\n",
       "      <td>2021-01-21</td>\n",
       "      <td>2021-01-21 00:00:00</td>\n",
       "      <td>2021-01-21 00:00:00</td>\n",
       "      <td></td>\n",
       "      <td>Semarang</td>\n",
       "      <td>Indonesia</td>\n",
       "      <td>Android</td>\n",
       "      <td>22</td>\n",
       "      <td>Adelyn Simmons</td>\n",
       "      <td>Google Ads</td>\n",
       "      <td>Adelyn Simmons</td>\n",
       "      <td>NaN</td>\n",
       "      <td>INV48190</td>\n",
       "      <td>Adelyn Simmons</td>\n",
       "      <td>100000.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   User ID        FullName_x   Install        Uninstall Time App Launch  \\\n",
       "0    51206        Abby Nixon 2021-01-06  2021-01-10 00:00:00 2021-01-06   \n",
       "1    58863      Abril Hunter 2021-01-10  2021-01-11 00:00:00 2021-01-10   \n",
       "2    58934       Ada Murillo 2021-01-07  2021-01-09 00:00:00 2021-01-07   \n",
       "3    54810  Addisyn Bradford 2021-01-05                      2021-01-05   \n",
       "4    51424    Adelyn Simmons 2021-01-21                      2021-01-21   \n",
       "\n",
       "   Start Registration  Registration Completed First Time Transaction  \\\n",
       "0                                                                      \n",
       "1                                                                      \n",
       "2                                                                      \n",
       "3  2021-01-05 00:00:00    2021-01-05 00:00:00    2021-01-05 00:00:00   \n",
       "4  2021-01-21 00:00:00    2021-01-21 00:00:00                          \n",
       "\n",
       "  City Activity Country Activity       OS  Age        FullName_y  \\\n",
       "0      Surabaya        Indonesia      IOS   20        Abby Nixon   \n",
       "1      Surabaya        Indonesia  Android   19      Abril Hunter   \n",
       "2     Tangerang        Indonesia  Android   19       Ada Murillo   \n",
       "3     Tangerang        Indonesia  Android   19  Addisyn Bradford   \n",
       "4      Semarang        Indonesia  Android   22    Adelyn Simmons   \n",
       "\n",
       "  Acquisition Channel        FullName_x Referral Code Referrer Code  \\\n",
       "0             Organic        Abby Nixon           NaN      INV14278   \n",
       "1             Organic      Abril Hunter           NaN      INV50686   \n",
       "2             Organic       Ada Murillo           NaN      INV85136   \n",
       "3             Organic  Addisyn Bradford           NaN      INV10756   \n",
       "4          Google Ads    Adelyn Simmons           NaN      INV48190   \n",
       "\n",
       "         FullName_y  First Time Transaction Amount  \n",
       "0        Abby Nixon                       100000.0  \n",
       "1      Abril Hunter                       100000.0  \n",
       "2       Ada Murillo                       100000.0  \n",
       "3  Addisyn Bradford                       100000.0  \n",
       "4    Adelyn Simmons                       100000.0  "
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_us_acq_ref_tr=df_us_acq_ref.merge(first_transaction_amount, on='User ID' , how='left')\n",
    "df_us_acq_ref_tr.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>User ID</th>\n",
       "      <th>Age</th>\n",
       "      <th>First Time Transaction Amount</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>941.000000</td>\n",
       "      <td>941.000000</td>\n",
       "      <td>1.980000e+02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>46234.480340</td>\n",
       "      <td>26.315622</td>\n",
       "      <td>4.707828e+05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>8752.361408</td>\n",
       "      <td>7.659180</td>\n",
       "      <td>1.195141e+06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>31121.000000</td>\n",
       "      <td>17.000000</td>\n",
       "      <td>5.000000e+04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>37933.000000</td>\n",
       "      <td>21.000000</td>\n",
       "      <td>1.000000e+05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>46576.000000</td>\n",
       "      <td>25.000000</td>\n",
       "      <td>1.000000e+05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>54411.000000</td>\n",
       "      <td>29.000000</td>\n",
       "      <td>5.000000e+05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>59987.000000</td>\n",
       "      <td>65.000000</td>\n",
       "      <td>1.000000e+07</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            User ID         Age  First Time Transaction Amount\n",
       "count    941.000000  941.000000                   1.980000e+02\n",
       "mean   46234.480340   26.315622                   4.707828e+05\n",
       "std     8752.361408    7.659180                   1.195141e+06\n",
       "min    31121.000000   17.000000                   5.000000e+04\n",
       "25%    37933.000000   21.000000                   1.000000e+05\n",
       "50%    46576.000000   25.000000                   1.000000e+05\n",
       "75%    54411.000000   29.000000                   5.000000e+05\n",
       "max    59987.000000   65.000000                   1.000000e+07"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#### EDA ###\n",
    "df_us_acq_ref_tr.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "User ID                            0\n",
       "FullName_x                         0\n",
       "Install                            0\n",
       "Uninstall Time                     0\n",
       "App Launch                         0\n",
       "Start Registration                 0\n",
       "Registration Completed            39\n",
       "First Time Transaction             0\n",
       "City Activity                      0\n",
       "Country Activity                   0\n",
       "OS                                 0\n",
       "Age                                0\n",
       "FullName_y                         0\n",
       "Acquisition Channel                0\n",
       "FullName_x                       665\n",
       "Referral Code                    780\n",
       "Referrer Code                    817\n",
       "FullName_y                       743\n",
       "First Time Transaction Amount    743\n",
       "dtype: int64"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_us_acq_ref_tr.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(941, 19)"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_us_acq_ref_tr.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Month</th>\n",
       "      <th>Acquisiton Channel</th>\n",
       "      <th>Cost (in IDR)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2021-01-01</td>\n",
       "      <td>Facebook</td>\n",
       "      <td>2000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2021-01-01</td>\n",
       "      <td>TikTok</td>\n",
       "      <td>3000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2021-01-01</td>\n",
       "      <td>Google Ads</td>\n",
       "      <td>20000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2021-02-01</td>\n",
       "      <td>Facebook</td>\n",
       "      <td>2300000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2021-02-01</td>\n",
       "      <td>TikTok</td>\n",
       "      <td>3600000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Month Acquisiton Channel  Cost (in IDR)\n",
       "0 2021-01-01           Facebook        2000000\n",
       "1 2021-01-01             TikTok        3000000\n",
       "2 2021-01-01         Google Ads       20000000\n",
       "3 2021-02-01           Facebook        2300000\n",
       "4 2021-02-01             TikTok        3600000"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "marketspend = pd.read_excel(\"C:/Users/tussh/Desktop/Bibit Task/Bibit Backup.xlsx\",sheet_name='marketing_spending')\n",
    "marketspend.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Visualization\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The histogram shows the age group 20-30 are the maximum user of the app."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Distribution of Age')"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "user_details['Age'].plot(kind='hist', bins=[ 10, 20, 30, 40, 50, 60, 70], figsize=(5,5))\n",
    "\n",
    "plt.xlabel(\"Age in Percent\")\n",
    "plt.title(\"Distribution of Age\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "From the below graph we get to know that maximum transcation amount is 1000000 and least is between 6000000 - 8000000 "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Distribution of First Time Transaction Amount')"
      ]
     },
     "execution_count": 76,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "first_transaction_amount['First Time Transaction Amount'].plot(kind='hist', bins=[ 1000000, 2000000, 3000000, 4000000, 5000000, 6000000, 7000000,8000000,9000000,10000000], figsize=(5,5))\n",
    "\n",
    "plt.xlabel(\"First Time Transaction Amount in Percent\")\n",
    "plt.title(\"Distribution of First Time Transaction Amount\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Here the first plot shows the age wise users of OS and Anroid is very higher and 20 -30 age group are the max users and second plot shows the Anroid count"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.FacetGrid at 0x1b2216f1790>"
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.catplot(x=\"OS\", y=\"Age\", kind=\"box\", data=df_us_acq)\n",
    "sns.catplot(x=\"OS\", kind=\"count\", palette=\"ch:.25\", data=df_us_acq)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "From below plot we to know that the organic is one which gives the maximum users to bibit app and needs to do more marketing the organic when compared to the google ads where the marketing spending is more but revenew is very less."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.FacetGrid at 0x1b221a57f70>"
      ]
     },
     "execution_count": 74,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.catplot(x=\"Acquisition Channel\", kind=\"count\", palette=\"ch:.25\", data=acquisition_channel)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\tussh\\anaconda3\\lib\\site-packages\\seaborn\\_decorators.py:36: FutureWarning: Pass the following variables as keyword args: x, y. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
      "  warnings.warn(\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.FacetGrid at 0x1b22060bd00>"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.catplot('Acquisiton Channel','Cost (in IDR)', kind = 'bar', data = marketspend, hue= 'Acquisiton Channel')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "####From above graph we get to know that markenting spend on google ads is most.\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\tussh\\anaconda3\\lib\\site-packages\\seaborn\\_decorators.py:36: FutureWarning: Pass the following variables as keyword args: x, y. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n",
      "  warnings.warn(\n",
      "C:\\Users\\tussh\\anaconda3\\lib\\site-packages\\seaborn\\categorical.py:1296: UserWarning: 56.8% of the points cannot be placed; you may want to decrease the size of the markers or use stripplot.\n",
      "  warnings.warn(msg, UserWarning)\n",
      "C:\\Users\\tussh\\anaconda3\\lib\\site-packages\\seaborn\\categorical.py:1296: UserWarning: 14.8% of the points cannot be placed; you may want to decrease the size of the markers or use stripplot.\n",
      "  warnings.warn(msg, UserWarning)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.FacetGrid at 0x1b2204f7970>"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.catplot('Acquisition Channel','Age',kind = 'swarm', data = df_us_acq )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
